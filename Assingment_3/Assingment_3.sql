use mavenmovies;

-- Rank the customers based on the total amount they've spent on rentals
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       SUM(p.amount) AS total_amount_spent,
        RANK() OVER (ORDER BY SUM(p.amount) DESC) AS customer_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id
ORDER BY total_amount_spent DESC;


--  Calculate the cumulative revenue generated by each film over time.
SELECT f.film_id, f.title, p.payment_date, p.amount as amount, SUM(p.amount) 
OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM payment p JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
ORDER BY f.film_id, p.payment_date;

-- Determine the average rental duration for each film, considering films with similar lengths
SELECT film_id, title, rental_duration, AVG(rental_duration) OVER (PARTITION BY length) 
AS avg_rental_duration
FROM film
WHERE length IS NOT NULL;

-- Identify the top 3 films in each category based on their rental counts
WITH FilmCategaoryRentalCount AS (
    SELECT fc.category_id, fc.film_id, f.title,
     COUNT(r.rental_id) as rentalCount,
	 ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS ranking
    FROM film_category fc
    JOIN rental r ON fc.film_id = r.inventory_id
    JOIN film f ON fc.film_id = f.film_id
    GROUP BY fc.category_id, fc.film_id, f.title
)
SELECT category_id, film_id, title, rentalCount, ranking
FROM FilmCategaoryRentalCount
WHERE ranking <= 3;

-- Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
 SELECT
        customer_id,
        COUNT(rental_id) AS total_rentals,
        AVG(COUNT(rental_id)) OVER () AS avg_customer_rentals,
        COUNT(rental_id) - AVG(COUNT(rental_id)) OVER () AS rental_difference
    FROM
        rental
    GROUP BY
        customer_id;

-- Find the monthly revenue trend for the entire rental store over time.
    SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS total_revenue
    FROM
        payment
    GROUP BY
        DATE_FORMAT(payment_date, '%Y-%m');
        
-- Identify the customers whose total spending on rentals falls within the top 20% of all customers
WITH CustomerSpending AS (
    SELECT
        customer_id,
        SUM(amount) AS total_spending,
        RANK() OVER (ORDER BY SUM(amount) DESC) AS customer_rank
    FROM
        payment
    GROUP BY
        customer_id
)
SELECT
    customer_id,
    total_spending
FROM
    CustomerSpending
WHERE
    customer_rank <= (
    SELECT 0.2 * COUNT(DISTINCT customer_id) + 1 FROM CustomerSpending);

-- Calculate the running total of rentals per category, ordered by rental count.
 WITH CategoryRentalCount AS (
    SELECT
        fc.category_id,
        COUNT(r.rental_id) AS rental_count,
        RANK() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rental_rank
    FROM
        film_category fc
    JOIN
        rental r ON fc.film_id = r.inventory_id
    GROUP BY
        fc.category_id
)
SELECT
    crc.category_id,
    crc.rental_count,
    SUM(crc.rental_count) OVER (ORDER BY crc.rental_rank) AS running_total
FROM
    CategoryRentalCount crc
ORDER BY
    crc.rental_rank;

-- Find the films that have been rented less than the average rental count for their 
-- respective categories
WITH RentalFilm AS(
SELECT fc.film_id,fc.category_id,
COUNT(r.rental_id) as rentalCount,
AVG(COUNT(r.rental_id)) OVER(PARTITION BY fc.category_id) as avg_rental_count
FROM film_category fc
JOIN rental r ON fc.film_id = r.inventory_id
GROUP BY fc.film_id,fc.category_id
)
SELECT rf.film_id,rf.category_id,rf.rentalCount,rf.avg_rental_count 
FROM RentalFilm rf
WHERE 
rf.rentalCount < rf.avg_rental_count;

-- Identify the top 5 months with the highest revenue and display the revenue 
-- generated in each month.
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS payment_month,
    SUM(p.amount) AS total_revenue
FROM 
    payment p
GROUP BY 
    DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY 
    total_revenue DESC
LIMIT 5;

